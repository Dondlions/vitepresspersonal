import{_ as i,c as a,o,a$ as e}from"./chunks/framework.BDf5h4Xk.js";const n="/vitepresspersonal/assets/spring.D-2MSy-Y.png",S=JSON.parse('{"title":"Spring 概述","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/spring_foundation.md","filePath":"tutorial/spring_foundation.md","lastUpdated":1743557234000}'),p={name:"tutorial/spring_foundation.md"};function t(l,r,s,g,d,c){return o(),a("div",null,r[0]||(r[0]=[e('<h1 id="spring-概述" tabindex="-1">Spring 概述 <a class="header-anchor" href="#spring-概述" aria-label="Permalink to &quot;Spring 概述&quot;">​</a></h1><p><img src="'+n+'" alt="spring"></p><p>Spring 是一款主流的 JAVA EE 轻量级开源框架，目的是用于简化 Java 企业级引用的开发难度和开发周期。从简单性，可测试性和 松耦合度的角度而言，任何 Java 应用都可以从 Spring 中受益。Spring 框架提供自己提供的功能外，还提供整合其他技术和框架的能力。</p><h2 id="spring-核心" tabindex="-1">Spring 核心 <a class="header-anchor" href="#spring-核心" aria-label="Permalink to &quot;Spring 核心&quot;">​</a></h2><p>Spring 指的是 Spring Framework，通常我们称之为 Spring 框架。Spring 框架是一个分层的面向切面的 Java 应用程序的一站式解决框架 ，它是 Spring 技术栈的核心和基础，是为了解决企业级引用开发的复杂性而创建的。</p><p>Spring 有两个核心模块：<strong><em>IoC</em></strong> 和 <strong><em>AOP</em></strong>。</p><p><strong>Ioc</strong>：Inverse of Control 的简写，为 控制反转，指把创建对象交给 Spring 进行管理。</p><p><strong>AOP</strong>：Aspect Oriented Programming 的简写，为 面向切面编程。AOP 用来封装多个类的公共行为，将那些与业务无关，却为业务模块共同调用的逻辑封装起来，减少系统的重复代码，降低模块间的耦合度。另外，AOP 还解决一些系统层面上的问题，比如日志、事务、权限等。</p><h2 id="spring-framework-的特点" tabindex="-1">Spring Framework 的特点 <a class="header-anchor" href="#spring-framework-的特点" aria-label="Permalink to &quot;Spring Framework 的特点&quot;">​</a></h2><ul><li><p><code>控制反转</code>：IoC，反转资源获取方向；把自己创建的资源、向环境索取资源变为环境将资源准备好，我们享受资源注入。</p></li><li><p><code>面向切面编程</code>：AOP，在不修改源代码的基础上增强代码功能。</p></li><li><p><code>容器</code>：Spring IoC 是一个容器，因为它包含并管理组件对象的生命周期；组件享受到了容器化的管理，替程序员屏蔽了组件创建过程中的大量细节，极大降低了使用门槛，大幅度提高了开发效率。</p></li><li><p><code>一站式</code>：在 IOC 和 AOP 的基础上可以整合各种企业应用的开源框架和优秀的第三方库，而且在 Spring 旗下的项目已经覆盖了广泛领域，很多方面的功能性需求可以在 Spring Framework 的基础上全部使用 Spring 来实现。</p></li></ul><h3 id="ioc-的实现方式" tabindex="-1">IoC 的实现方式 <a class="header-anchor" href="#ioc-的实现方式" aria-label="Permalink to &quot;IoC 的实现方式&quot;">​</a></h3><p>IoC 是一种控制反转的思想，而 IoC 的实现方式是：DI（Dependency Injection）依赖注入</p><h3 id="ioc、bean、di-的关系-抽象" tabindex="-1">IoC、Bean、DI 的关系（抽象） <a class="header-anchor" href="#ioc、bean、di-的关系-抽象" aria-label="Permalink to &quot;IoC、Bean、DI 的关系（抽象）&quot;">​</a></h3><p>Bean 是士兵，DI 是补给系统，IoC 容器是军队后勤部</p><ol><li><p>后勤部(IoC)招募士兵(创建 Bean)</p></li><li><p>建立花名册(Bean 定义注册表)</p></li><li><p>打仗时(业务运行)：</p><ul><li><p>前线部队(Controller)发出需求</p></li><li><p>补给系统(DI)自动调配弹药(Service)和粮草(Repository)</p></li><li><p>所有资源无需前线自己筹备</p></li></ul></li></ol>',15)]))}const h=i(p,[["render",t]]);export{S as __pageData,h as default};
