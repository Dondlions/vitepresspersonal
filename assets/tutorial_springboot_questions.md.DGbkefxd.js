import{_ as e,c as l,o as s,a$ as a}from"./chunks/framework.BDf5h4Xk.js";const u=JSON.parse('{"title":"Q：在 springboot 的后端是项目中，注解的作用是什么？","description":"","frontmatter":{},"headers":[],"relativePath":"tutorial/springboot_questions.md","filePath":"tutorial/springboot_questions.md","lastUpdated":1743558011000}'),o={name:"tutorial/springboot_questions.md"};function t(n,i,p,d,r,c){return s(),l("div",null,i[0]||(i[0]=[a(`<h1 id="q-在-springboot-的后端是项目中-注解的作用是什么" tabindex="-1">Q：在 springboot 的后端是项目中，注解的作用是什么？ <a class="header-anchor" href="#q-在-springboot-的后端是项目中-注解的作用是什么" aria-label="Permalink to &quot;Q：在 springboot 的后端是项目中，注解的作用是什么？&quot;">​</a></h1><p><em><em>A</em></em>： 在 Spring Boot 后端项目中，注解(Annotation)是一种元数据形式，它为代码提供附加信息而不直接影响代码逻辑。Spring Boot 大量使用注解来简化配置和开发工作。以下是主要注解类型及其作用</p><ul><li><p>配置简化：减少 XML 配置，通过注解声明组件和依赖关系</p></li><li><p>行为控制：定义组件如何被创建、管理和交互</p></li><li><p>路由映射：处理 HTTP 请求与响应</p></li><li><p>依赖注入：自动装配组件</p></li><li><p>生命周期管理：控制 bean 的创建和销毁过程</p></li></ul><br><br><br><br><br><hr><h1 id="q-在-springboot-项目中常用的注解有哪些-作用是什么" tabindex="-1">Q：在 springboot 项目中常用的注解有哪些？作用是什么？ <a class="header-anchor" href="#q-在-springboot-项目中常用的注解有哪些-作用是什么" aria-label="Permalink to &quot;Q：在 springboot 项目中常用的注解有哪些？作用是什么？&quot;">​</a></h1><ol><li><p>启动与配置：</p><ul><li><code>@springBootAppLication</code>：标记主类，启动 Spring Boot 应用程序</li><li><code>@Configuration</code>：定义配置类，替代 XML 配置文件</li><li><code>@EnableAutoConfiguration</code>：启用 Spring Boot 自动配置</li><li><code>@ComponentScan</code>：扫描指定包及其子包中的组件</li><li><code>@PropertySource</code>：加载属性文件</li><li><code>@Import</code>：导入其他配置类</li></ul></li><li><p>组件扫描</p><ul><li><code>@Component</code>：通用组件</li><li><code>@Service</code>：标记服务层组件</li><li><code>@Repository</code>：标记数据访问层组件</li><li><code>@Controller</code>/<code>@RestController</code>：标记控制器组件</li></ul></li><li><p>Web 相关</p><ul><li><code>@RequestMapping</code>：映射 Web 请求路径</li><li><code>@GetMapping</code>/<code>@PostMapping</code>等：特定 HTTP 方法是我映射</li><li><code>@PathVariable</code>：绑定 URL 路径参数</li><li><code>@RequestParam</code>：绑定请求参数</li><li><code>@RequestBody</code>：绑定请求体</li><li><code>@ResponseBody</code>：将返回值序列化为 JSON 或 XML</li></ul></li><li><p>依赖注入</p><ul><li><code>@Autowired</code>：自动装配 bean</li><li><code>@Qualifier</code>：指定要装配的 bean</li><li><code>@Resource</code>：JDK 注解，功能类似@Autowired</li><li><code>@Value</code>：注入配置属性</li></ul></li><li><p>数据访问</p><ul><li><code>@Entity</code>：标记实体类</li><li><code>@Table</code>：指定数据库表名</li><li><code>@Id</code>：指定主键</li><li><code>@Column</code>：指定列名</li><li><code>@Transactional</code>：声明事务方法</li></ul></li><li><p>安全</p><ul><li><code>@EnableWebSecurity</code>：启用 Web 安全配置</li><li><code>@EnableGlobalMethodSecurity</code>：启用方法级安全配置</li><li><code>@PreAuthorize</code>/<code>@PostAuthorize</code>：方法权限控制</li></ul></li><li><p>测试</p><ul><li><code>@SpringBootTest</code>：集成测试</li><li><code>@MockBean</code>：模拟依赖</li><li><code>@RunWith</code>：指定测试运行器</li></ul></li></ol><br><br><br><br><br><hr><h1 id="q-什么是断言" tabindex="-1">Q： 什么是断言？ <a class="header-anchor" href="#q-什么是断言" aria-label="Permalink to &quot;Q： 什么是断言？&quot;">​</a></h1><p><em><em>A</em></em>：断言（Assertion）是一种用于验证程序正确性的机制，它通过检查条件是否满足来确保代码的正确性。断言通常用于开发和测试阶段，帮助开发者发现潜在的错误和问题。</p><p>一句话总结断言：<strong><em>我觉得结果就是我认为的语句，不是的话就报错</em></strong></p><p>java 的内置断言是：assert：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">&gt;</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">0</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> :</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;x 必须是正数&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span></code></pre></div><p>测试框架中的断言（junit 等）：</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertEquals</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(expected, actual);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(condition);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">assertNotNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(object);</span></span></code></pre></div><p>Spring 中的断言工具：</p><p>Spring 框架提供了 Assert 工具类</p><div class="language-java vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">java</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">notNull</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(object, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;对象不能为null&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">Assert.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">isTrue</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(condition, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;条件必须为true&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span></code></pre></div><br><br><br><br><br><hr><h1 id="q-junit-的作用是什么" tabindex="-1">Q： junit 的作用是什么？ <a class="header-anchor" href="#q-junit-的作用是什么" aria-label="Permalink to &quot;Q： junit 的作用是什么？&quot;">​</a></h1><p><em><em>A</em></em>：是 java 编程语言中最流行的单元测试框架，它在软件开发中扮演着关键的角色。JUnit 的主要作用包括：</p><ol><li><p>单元测试自动化</p><ul><li>语序开发者编写可重复执行的测试代码</li><li>自动化验证单个类或方法的正确性</li><li>提供快速反馈机制，减少手动测试时间</li></ul></li><li><p>回归测试保障</p><ul><li>确保代码修改不会破坏现有功能</li><li>每次构建可以自动运行全部测试套件</li><li>早期发现因代码变更引入的错误</li></ul></li><li><p>测试注解系统</p><ul><li><code>@Test</code>：标记测试方法</li><li><code>@BeforeEach</code>/<code>@AfterEach</code>：测试前置后置操作</li><li><code>@BeforeAll</code>/<code>@AfterAll</code>：测试类级别初始化和清理</li></ul></li></ol>`,36)]))}const k=e(o,[["render",t]]);export{u as __pageData,k as default};
